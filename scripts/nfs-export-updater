#!/usr/bin/env python3

# OpenEmbedded nfsroot updater
#
# Copyright (C) 2023 Pengutronix
#
# SPDX-License-Identifier: GPL-2.0-only
#
import os
import sys
import argparse
import logging
script_path = os.path.dirname(os.path.realpath(__file__))
lib_path = script_path + '/lib'
sys.path = sys.path + [lib_path]
import scriptutils
logger = scriptutils.logger_create('nfs-export-updater')
import scriptpath
scriptpath.add_oe_lib_path()

import asyncio

from nfs_export_updater.server import NFSRootUpdateServer

logger = logging.getLogger('nfs-export-updater')


def main():
    parser = argparse.ArgumentParser(description='''
NFS export update server for bitbake

Required steps before starting the server are:

- Add `INHERIT += "nfsroot"` to local.conf or another config file and build a root file system image.
- Export the root file system via "runqemu-extract-sdk <rootfs-archive> <exportdir>"
- Start a userspace nfs server with "runqemu-export-rootfs start <exportdir>"
  (for QEMU you can also use "runqemu qemux86-64 nographic slirp <exportdir>").

You can now modify and update individual packages by running 'bitbake <package>'.
''', formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('rootfs', help='rootfs recipe', action='store')
    parser.add_argument('exportdir', help='nfs root export directory', action='store')
    parser.add_argument('-d', '--debug', help='Enable debug output', action='store_true')

    args = parser.parse_args()

    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
    else:
        logging.getLogger().setLevel(logging.INFO)

    if not os.path.isabs(args.exportdir):
        args.exportdir = os.path.abspath(args.exportdir)

    if not os.path.exists(args.exportdir):
        logger.error(f"{args.exportdir} does not exist.")
        logger.error("Did you run runqemu-extract-sdk to create it?")
        sys.exit(1)

    # needs to be consistent with runqemu-export-rootfs
    pseudo_localstatedir = os.path.join(
            args.exportdir,
            '..',
            os.path.basename(args.exportdir) + '.pseudo_state')

    if not os.path.exists(pseudo_localstatedir):
        logger.error(f"{pseudo_localstatedir} does not exist.")
        logger.error("Did you run runqemu-export-rootfs to export it?")
        sys.exit(1)

    os.environ['PSEUDO_LOCALSTATEDIR'] = pseudo_localstatedir
    logger.info("PSEUDO_LOCALSTATEDIR is %s" % os.environ['PSEUDO_LOCALSTATEDIR'])

    server = NFSRootUpdateServer(args.rootfs, args.exportdir)

    logger.info(f"NFS export dir ist at {args.exportdir}")
    logger.info("Starting server..")

    # Start the server
    asyncio.run(server.start_server())


if __name__ == "__main__":
    main()
